{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json", "dbt_version": "0.21.1", "generated_at": "2022-05-24T16:14:34.996185Z", "invocation_id": "f9a59dc6-505c-4a29-ba01-861ecd5baaa7", "env": {}, "project_id": "d70072b5eeebcaa6c7085f94954150b1", "user_id": "e4258b92-9da6-44d8-9e22-dc3a3d76b2a8", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"model.emd.taxa_precipitacao_satelite": {"raw_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.taxa_precipitacao_satelite`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meio_ambiente_clima", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "meio_ambiente_clima", "fqn": ["emd", "meio_ambiente_clima", "taxa_precipitacao_satelite"], "unique_id": "model.emd.taxa_precipitacao_satelite", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "meio_ambiente_clima/taxa_precipitacao_satelite.sql", "original_file_path": "models/meio_ambiente_clima/taxa_precipitacao_satelite.sql", "name": "taxa_precipitacao_satelite", "alias": "taxa_precipitacao_satelite", "checksum": {"name": "sha256", "checksum": "9b52cdcef6acf8478a8df45b3973ff636aaa089af9edcb8ac026a063469a32f6"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/emd/models/meio_ambiente_clima/taxa_precipitacao_satelite.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "meio_ambiente_clima"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.taxa_precipitacao_satelite`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`meio_ambiente_clima`.`taxa_precipitacao_satelite`"}, "model.emd.estacoes_inmet": {"raw_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.estacoes_inmet`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meio_ambiente_clima", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "meio_ambiente_clima", "fqn": ["emd", "meio_ambiente_clima", "estacoes_inmet"], "unique_id": "model.emd.estacoes_inmet", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "meio_ambiente_clima/estacoes_inmet.sql", "original_file_path": "models/meio_ambiente_clima/estacoes_inmet.sql", "name": "estacoes_inmet", "alias": "estacoes_inmet", "checksum": {"name": "sha256", "checksum": "b0852b30ce171ab1feb389c5c186e46088085e11e617323c3f93ad293ed98d2c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/emd/models/meio_ambiente_clima/estacoes_inmet.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "meio_ambiente_clima"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.estacoes_inmet`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`meio_ambiente_clima`.`estacoes_inmet`"}, "model.emd.estacoes_websirene": {"raw_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.estacoes_websirene`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meio_ambiente_clima", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "meio_ambiente_clima", "fqn": ["emd", "meio_ambiente_clima", "estacoes_websirene"], "unique_id": "model.emd.estacoes_websirene", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "meio_ambiente_clima/estacoes_websirene.sql", "original_file_path": "models/meio_ambiente_clima/estacoes_websirene.sql", "name": "estacoes_websirene", "alias": "estacoes_websirene", "checksum": {"name": "sha256", "checksum": "c5722550e3ebad82c2cad8a4341dede24e7c5d8a50c11e40b33f2ab214d97abd"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/emd/models/meio_ambiente_clima/estacoes_websirene.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "meio_ambiente_clima"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.estacoes_websirene`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`meio_ambiente_clima`.`estacoes_websirene`"}, "model.emd.estacoes_alertario": {"raw_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.estacoes_alertario`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meio_ambiente_clima", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "meio_ambiente_clima", "fqn": ["emd", "meio_ambiente_clima", "estacoes_alertario"], "unique_id": "model.emd.estacoes_alertario", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "meio_ambiente_clima/estacoes_alertario.sql", "original_file_path": "models/meio_ambiente_clima/estacoes_alertario.sql", "name": "estacoes_alertario", "alias": "estacoes_alertario", "checksum": {"name": "sha256", "checksum": "6469ec9cf12189dd2593ada004bf2f163487b9686afcc1c792da19bb0e558eb6"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/emd/models/meio_ambiente_clima/estacoes_alertario.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "meio_ambiente_clima"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.estacoes_alertario`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`meio_ambiente_clima`.`estacoes_alertario`"}, "model.emd.taxa_precipitacao_alertario": {"raw_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.taxa_precipitacao_alertario`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meio_ambiente_clima", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "meio_ambiente_clima", "fqn": ["emd", "meio_ambiente_clima", "taxa_precipitacao_alertario"], "unique_id": "model.emd.taxa_precipitacao_alertario", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "meio_ambiente_clima/taxa_precipitacao_alertario.sql", "original_file_path": "models/meio_ambiente_clima/taxa_precipitacao_alertario.sql", "name": "taxa_precipitacao_alertario", "alias": "taxa_precipitacao_alertario", "checksum": {"name": "sha256", "checksum": "2c8904b589942a5300baf6456c11c3b88095979c7a6598e147ce77532aa4573e"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Taxa medida de precipita\u00e7\u00e3o das esta\u00e7\u00f5es pluviom\u00e9tricas da cidade do Rio de Janeiro.\r\nAs estimativas s\u00e3o feitas de 15 em 15 minutos, cada registro contendo dados desta medida.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: 15 minutos\n**Cobertura temporal**: Desde 1997 at\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: COR\n**Publicado por**: Patr\u00edcia Catandi\n**Publicado por (email)**: patriciabcatandi@gmail.com\n", "columns": {"data_medicao": {"name": "data_medicao", "description": "Data e hor\u00e1rio em que foi realizada a medi\u00e7\u00e3o", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_estacao": {"name": "id_estacao", "description": "ID da esta\u00e7\u00e3o pluviom\u00e9trica em que ocorreu a medi\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "acumulado_chuva_15_min": {"name": "acumulado_chuva_15_min", "description": "Acumulado de chuva em 15 minutos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "acumulado_chuva_1_h": {"name": "acumulado_chuva_1_h", "description": "Acumulado de chuva em 1 hora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "acumulado_chuva_4_h": {"name": "acumulado_chuva_4_h", "description": "Acumulado de chuva em 4 horas.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "acumulado_chuva_24_h": {"name": "acumulado_chuva_24_h", "description": "Acumulado de chuva em 24 horas.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "acumulado_chuva_96_h": {"name": "acumulado_chuva_96_h", "description": "Acumulado de chuva em 96 horas.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/meio_ambiente_clima/schema.yml", "compiled_path": "target/compiled/emd/models/meio_ambiente_clima/taxa_precipitacao_alertario.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "meio_ambiente_clima"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-cor.meio_ambiente_clima.taxa_precipitacao_alertario`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`meio_ambiente_clima`.`taxa_precipitacao_alertario`"}, "model.emd.quantidade_agua_precipitavel_satelite": {"raw_sql": "SELECT * FROM `rj-escritorio-dev.meio_ambiente_clima.quantidade_agua_precipitavel_satelite`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meio_ambiente_clima", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "meio_ambiente_clima", "fqn": ["emd", "meio_ambiente_clima", "quantidade_agua_precipitavel_satelite"], "unique_id": "model.emd.quantidade_agua_precipitavel_satelite", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "meio_ambiente_clima/quantidade_agua_precipitavel_satelite.sql", "original_file_path": "models/meio_ambiente_clima/quantidade_agua_precipitavel_satelite.sql", "name": "quantidade_agua_precipitavel_satelite", "alias": "quantidade_agua_precipitavel_satelite", "checksum": {"name": "sha256", "checksum": "fc61d98ca7f8e32b162210f14ff0a4e829d9db439d9f206f2d3a424871ace0a8"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/emd/models/meio_ambiente_clima/quantidade_agua_precipitavel_satelite.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "meio_ambiente_clima"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-escritorio-dev.meio_ambiente_clima.quantidade_agua_precipitavel_satelite`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`meio_ambiente_clima`.`quantidade_agua_precipitavel_satelite`"}, "model.emd.meteorologia_inmet": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by={\n            \"field\": \"data_particao\",\n            \"data_type\": \"date\",\n            \"granularity\": \"month\",\n        }    \n    )\n}}\n\nSELECT\n * \nFROM `rj-cor.meio_ambiente_clima.meteorologia_inmet`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n{% if is_incremental() %}\n\n{% set max_partition = run_query(\"SELECT gr FROM (SELECT IF(max(data_particao) > CURRENT_DATE('America/Sao_Paulo'), CURRENT_DATE('America/Sao_Paulo'), max(data_particao)) as gr FROM \" ~ this ~ \")\").columns[0].values()[0] %}\n\nAND\n    data_particao > (\"{{ max_partition }}\")\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meio_ambiente_clima", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "month"}, "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "meio_ambiente_clima", "fqn": ["emd", "meio_ambiente_clima", "meteorologia_inmet"], "unique_id": "model.emd.meteorologia_inmet", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "meio_ambiente_clima/meteorologia_inmet.sql", "original_file_path": "models/meio_ambiente_clima/meteorologia_inmet.sql", "name": "meteorologia_inmet", "alias": "meteorologia_inmet", "checksum": {"name": "sha256", "checksum": "92a352d96de92f7a8de5cc6b01b66c475f80bda5225aef156354338071f9ee38"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Dados meteorol\u00f3gicos obtidos nas esta\u00e7\u00f5es pluviom\u00e9tricas do INMET ( Instituto Nacional de Meteorologia ) na cidade do Rio de Janeiro.\r\nAs medidas s\u00e3o feitas de hora em hora, cada registro contendo dados destas medidas para cada esta\u00e7\u00e3o. \r\nEntre os dados temos hor\u00e1rio da medi\u00e7\u00e3o, acumulado de chuva em 1 hora, dire\u00e7\u00e3o e velocidade do vento, temperatura, press\u00e3o atmosf\u00e9rica, umidade e radia\u00e7\u00e3o global.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Hor\u00e1rio\n**Cobertura temporal**: Desde 2010 at\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: INMET\n**Publicado por**: Patr\u00edcia Catandi\n**Publicado por (email)**: patriciabcatandi@gmail.com\n", "columns": {"id_estacao": {"name": "id_estacao", "description": "ID da esta\u00e7\u00e3o dada pelo INMET.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data": {"name": "data", "description": "Data em que foi realizada a medi\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "horario": {"name": "horario", "description": "Hor\u00e1rio em que foi realizada a medi\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "acumulado_chuva_1_h": {"name": "acumulado_chuva_1_h", "description": "Acumulado de chuva em 1 hora na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "direcao_vento": {"name": "direcao_vento", "description": "Dire\u00e7\u00e3o hor\u00e1ria do vento na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "velocidade_vento": {"name": "velocidade_vento", "description": "Velocidade do vento na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "temperatura": {"name": "temperatura", "description": "Temperatura na medi\u00e7\u00e3o instant\u00e2nea na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pressao": {"name": "pressao", "description": "Press\u00e3o atmosf\u00e9rica ao n\u00edvel da esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pressao_minima": {"name": "pressao_minima", "description": "Press\u00e3o atmosf\u00e9rica m\u00ednima na hora anterior.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pressao_maxima": {"name": "pressao_maxima", "description": "Press\u00e3o atmosf\u00e9rica m\u00e1xima na hora anterior.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "umidade": {"name": "umidade", "description": "Umidade relativa do ar instant\u00e2nea na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "umidade_minima": {"name": "umidade_minima", "description": "Umidade relativa m\u00ednima na hora anterior.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "umidade_maxima": {"name": "umidade_maxima", "description": "Umidade relativa m\u00e1xima na hora anterior.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rajada_vento_max": {"name": "rajada_vento_max", "description": "Rajada de vento m\u00e1xima na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "temperatura_minima": {"name": "temperatura_minima", "description": "Temperatura m\u00ednima na hora anterior na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "temperatura_maxima": {"name": "temperatura_maxima", "description": "Temperatura m\u00e1xima na hora anterior na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "radiacao_global": {"name": "radiacao_global", "description": "Radia\u00e7\u00e3o solar global captada na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "temperatura_orvalho": {"name": "temperatura_orvalho", "description": "Temperatura de orvalho instant\u00e2nea na esta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "temperatura_orvalho_minimo": {"name": "temperatura_orvalho_minimo", "description": "Temperatura m\u00ednima de orvalho na hora anterior.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "temperatura_orvalho_maximo": {"name": "temperatura_orvalho_maximo", "description": "Temperatura m\u00e1xima de orvalho na hora anterior.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/meio_ambiente_clima/schema.yml", "compiled_path": "target/compiled/emd/models/meio_ambiente_clima/meteorologia_inmet.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "meio_ambiente_clima", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "month"}}, "created_at": 1653408875, "compiled_sql": "\n\nSELECT\n * \nFROM `rj-cor.meio_ambiente_clima.meteorologia_inmet`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`meio_ambiente_clima`.`meteorologia_inmet`"}, "model.emd.logradouro": {"raw_sql": "SELECT * FROM `rj-escritorio-dev.dados_mestres.logradouro`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dados_mestres", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "dados_mestres", "fqn": ["emd", "dados_mestres", "logradouro"], "unique_id": "model.emd.logradouro", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "dados_mestres/logradouro.sql", "original_file_path": "models/dados_mestres/logradouro.sql", "name": "logradouro", "alias": "logradouro", "checksum": {"name": "sha256", "checksum": "0f94bcada1f19fc32e0c4fb856c0873fa29e8a991fe74e393e07ce2b18b063cf"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Trechos ativos de logradouros do munic\u00edpio do Rio de Janeiro. \r\nTrecho de logradouro \u00e9 um peda\u00e7o do logradouro, no caso de uma rua vai de uma esquina \u00e0 outra. Logradouro \u00e9 qualquer espa\u00e7o p\u00fablico comum que pode ser usufru\u00eddo por toda a popula\u00e7\u00e3o (reconhecidos formalmente ou n\u00e3o, de conhecimento da prefeitura do Rio de Janeiro), como largos, pra\u00e7as, ruas, jardins, parques, entre outros.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Mensal\n**Cobertura temporal**: At\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: Instituto Pereira Passos (IPP) / Secretaria Municipal de Planejamento Urbano (SMPU)\n**Publicado por**: IPP\n**Publicado por (email)**: contato.siurb@gmail.com\n", "columns": {"id_logradouro": {"name": "id_logradouro", "description": "C\u00f3digo oficial do logradouro dado pela Prefeitura do Rio de Janeiro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome": {"name": "nome", "description": "Nome do bairro onde est\u00e1 localizado o trecho de logradouro.\r\nUm trecho pode passar por v\u00e1rios bairros. \r\nEste atributo indica um dos bairros contendo o trecho. \r\nDeve respeitar o atributo Cod_Bairro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome_parcial": {"name": "nome_parcial", "description": "Nome parcial do logradouro. \r\nNome do logradouro sem o tipo do logradouro (rua, estrada, beco, travessa etc ) e sem a nobreza do logradouro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome_completo": {"name": "nome_completo", "description": "Nome completo do logradouro. \r\nNome do logradouro com tipo, nobreza e nome parcial.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_trecho": {"name": "id_trecho", "description": "Identificador \u00fanico do trecho no banco de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_situacao_trecho": {"name": "id_situacao_trecho", "description": "C\u00f3digo de situa\u00e7\u00e3o do trecho de logradouro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "situacao_trecho": {"name": "situacao_trecho", "description": "Situa\u00e7\u00e3o do trecho de logradouro.\r\nPor exemplo ativo, cancelado, rascunho. Nesta disponibiliza\u00e7\u00e3o do IPP somente entraram os trechos ativos. \r\nDeve respeitar o atributo COD_SIT_TRECHO.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_tipo": {"name": "id_tipo", "description": "C\u00f3digo do tipo do logradouro dado pela prefeitura do Rio de Janeiro.\r\nPor exemplo 41 \u00e9 associado a rua.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tipo": {"name": "tipo", "description": "Tipo do logradouro por extenso.\r\nPor exemplo rua. \r\nDeve respeitar o id_tipo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_bairro": {"name": "id_bairro", "description": "C\u00f3digo do bairro, dado pela prefeitura do Rio de Janeiro, do trecho de logradouro.\r\nVer o atributo nome.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inicio_numero_porta_par": {"name": "inicio_numero_porta_par", "description": "Numera\u00e7\u00e3o inicial do lado par do trecho de logradouro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_numero_porta_par": {"name": "final_numero_porta_par", "description": "Numera\u00e7\u00e3o final do lado par do trecho de logradouro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "inicio_numero_porta_impar": {"name": "inicio_numero_porta_impar", "description": "Numera\u00e7\u00e3o inicial do lado \u00edmpar do trecho de logradouro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "final_numero_porta_impar": {"name": "final_numero_porta_impar", "description": "Numera\u00e7\u00e3o final do lado \u00edmpar do trecho de logradouro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hierarquia": {"name": "hierarquia", "description": "Hierarquia vi\u00e1ria do trecho de logradouro. \r\nPor exemplo estrutural, arterial prim\u00e1ria, arterial secund\u00e1ria, coletora, local. \r\nClassifica\u00e7\u00e3o relacionada a regras para o tr\u00e1fego que passa por ela.\r\nPor exemplo fluxo de ve\u00edculos, velocidade m\u00e1xima etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_chavegeo": {"name": "id_chavegeo", "description": "C\u00f3digo Chavegeo calculado a partir das coordenadas X e Y do centro do trecho de logradouro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "geometry": {"name": "geometry", "description": "Geometria do trecho de logradouro no banco do ArcGIS.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/dados_mestres/schema.yml", "compiled_path": "target/compiled/emd/models/dados_mestres/logradouro.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "dados_mestres"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-escritorio-dev.dados_mestres.logradouro`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`dados_mestres`.`logradouro`"}, "model.emd.bairro": {"raw_sql": "SELECT * FROM `rj-escritorio-dev.dados_mestres.bairro`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "dados_mestres", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "dados_mestres", "fqn": ["emd", "dados_mestres", "bairro"], "unique_id": "model.emd.bairro", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "dados_mestres/bairro.sql", "original_file_path": "models/dados_mestres/bairro.sql", "name": "bairro", "alias": "bairro", "checksum": {"name": "sha256", "checksum": "8c05741c8cdfde1cbf3cb23390d6381093a2bd72ef791b1718496c85f84e0894"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Bairros da Cidade do Rio de Janeiro\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Mensal\n**Cobertura temporal**: At\u00e9 a presente data\n**\u00d3rg\u00e3o gestor dos dados**: Instituto Pereira Passos (IPP) / C\u00e2mara dos Vereadores (CMRJ)\n**Publicado por**: IPP\n**Publicado por (email)**: contato.siurb@gmail.com\n", "columns": {"shape_area": {"name": "shape_area", "description": "\u00c1rea (m\u00b2) do bairro. Calculado automaticamente pelo ArqGis.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_bairro": {"name": "id_bairro", "description": "C\u00f3digo do bairro dado pela prefeitura do Rio de Janeiro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome": {"name": "nome", "description": "Nome do bairro", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_area_planejamento": {"name": "id_area_planejamento", "description": "C\u00f3digo da \u00e1rea de planejamento onde est\u00e1 localizado a regi\u00e3o de planejamento do bairro.\r\nVer atributo nome_regiao_planejamento.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome_regiao_planejamento": {"name": "nome_regiao_planejamento", "description": "Nome da regi\u00e3o de planejamento. \r\nDeve respeitar o atributo id_regiao_planejamento.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_regiao_planejamento": {"name": "id_regiao_planejamento", "description": "C\u00f3digo da regi\u00e3o de planejamento onde est\u00e1 localizado o regi\u00e3o administrativa do bairro. Ver atributo REGIAO_ADM.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_regiao_administrativa": {"name": "id_regiao_administrativa", "description": "C\u00f3digo da regi\u00e3o administrativa onde est\u00e1 locallizado o bairro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome_regiao_administrativa": {"name": "nome_regiao_administrativa", "description": "Nome da regi\u00e3o administrativa onde est\u00e1 localizado o bairro. \r\nEste atributo deve respeitar o atributo id_regiao_administrativa.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "area": {"name": "area", "description": "\u00c1rea (m\u00b2) do bairro. \r\nTem o mesmo valor do atributo SHAPE.STArea().", "meta": {}, "data_type": null, "quote": null, "tags": []}, "perimetro": {"name": "perimetro", "description": "Per\u00edmetro (m) do bairro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "geometry": {"name": "geometry", "description": "Geometria do bairro no banco do ArcGIS.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/dados_mestres/schema.yml", "compiled_path": "target/compiled/emd/models/dados_mestres/bairro.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "dados_mestres"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-escritorio-dev.dados_mestres.bairro`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`dados_mestres`.`bairro`"}, "model.emd.chamado": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by={\n            \"field\": \"data_particao\",\n            \"data_type\": \"date\",\n            \"granularity\": \"month\",\n        }    \n    )\n}}\n\nSELECT \n    * \nFROM `rj-segovi.administracao_servicos_publicos_1746.chamado`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n{% if is_incremental() %}\n\n{% set max_partition = run_query(\"SELECT gr FROM (SELECT IF(max(data_particao) > CURRENT_DATE('America/Sao_Paulo'), CURRENT_DATE('America/Sao_Paulo'), max(data_particao)) as gr FROM \" ~ this ~ \")\").columns[0].values()[0] %}\n\nAND\n    data_particao > (\"{{ max_partition }}\")\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "administracao_servicos_publicos_1746", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "month"}, "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "administracao_servicos_publicos_1746", "fqn": ["emd", "administracao_servicos_publicos_1746", "chamado"], "unique_id": "model.emd.chamado", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "administracao_servicos_publicos_1746/chamado.sql", "original_file_path": "models/administracao_servicos_publicos_1746/chamado.sql", "name": "chamado", "alias": "chamado", "checksum": {"name": "sha256", "checksum": "76dfc9235c52fe4a8ff84aebf6f18d10b73e35d7530d54f35aafb43a780b57ec"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Chamados feitos ao 1746. S\u00e3o chamados desde mar\u00e7o de  2011, quando come\u00e7ou o projeto 1746.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Di\u00e1rio\n**Cobertura temporal**: Mar\u00e7o de  2011\n**\u00d3rg\u00e3o gestor dos dados**: SEGOVI\n**Publicado por**: Patricia Catandi\n**Publicado por (email)**: patriciabcatandi@gmail.com\n", "columns": {"id_chamado": {"name": "id_chamado", "description": "Identificador \u00fanico do chamado no banco de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_inicio": {"name": "data_inicio", "description": "Data de abertura do chamado. Ocorre quando o operador registra o chamado.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_fim": {"name": "data_fim", "description": "Data de fechamento do chamado. O chamado \u00e9 fechado quando o pedido \u00e9 atendido ou quando se percebe que o pedido n\u00e3o pode ser atendido.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_bairro": {"name": "id_bairro", "description": "Identificador \u00fanico, no banco de dados, do bairro onde ocorreu o fato que gerou o chamado.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_territorialidade": {"name": "id_territorialidade", "description": "Identificador \u00fanico, no banco de dados, da territorialidade onde ocorreu o fato que gerou o chamado. Territorialidade \u00e9 uma regi\u00e3o da cidade do Rio de Janeiro que tem com respons\u00e1vel um \u00f3rg\u00e3o especifico. Exemplo: CDURP, que \u00e9 respons\u00e1vel pela regi\u00e3o do porto do Rio de Janeiro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_logradouro": {"name": "id_logradouro", "description": "Identificador \u00fanico, no banco de dados, do logradouro onde ocorreu o fato que gerou o chamado.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numero_logradouro": {"name": "numero_logradouro", "description": "N\u00famero da porta onde ocorreu o fato que gerou o chamado.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_unidade_organizacional": {"name": "id_unidade_organizacional", "description": "Identificador \u00fanico, no banco de dados, do \u00f3rg\u00e3o que executa o chamado. Por exemplo: identificador da COMLURB quando o chamado \u00e9 relativo a limpeza urbana.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome_unidade_organizacional": {"name": "nome_unidade_organizacional", "description": "Nome do \u00f3rg\u00e3o que executa a demanda. Por exemplo: COMLURB quando a demanda \u00e9 relativa a limpeza urbana.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unidade_organizadional_ouvidoria": {"name": "unidade_organizadional_ouvidoria", "description": "Booleano indicando se o chamado do cidad\u00e3o foi feita Ouvidoria ou n\u00e3o. 1 caso sim, 0 caso n\u00e3o,", "meta": {}, "data_type": null, "quote": null, "tags": []}, "categoria": {"name": "categoria", "description": "Categoria do chamado. Exemplo: Servi\u00e7o, informa\u00e7\u00e3o, sugest\u00e3o, elogio, reclama\u00e7\u00e3o, cr\u00edtica.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_tipo": {"name": "id_tipo", "description": "Identificador \u00fanico, no banco de dados, do tipo do chamado. Ex: Ilumina\u00e7\u00e3o p\u00fablica.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tipo": {"name": "tipo", "description": "Nome do tipo do chamado. Ex: Ilumina\u00e7\u00e3o p\u00fablica.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_subtipo": {"name": "id_subtipo", "description": "Identificador \u00fanico, no banco de dados, do subtipo do chamado. Ex: Reparo de l\u00e2mpada apagada.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subtipo": {"name": "subtipo", "description": "Nome do subtipo do chamado.  Ex: Reparo de l\u00e2mpada apagada.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status do chamado. Ex. Fechado com solu\u00e7\u00e3o, aberto em andamento, pendente etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "Longitude do lugar do evento que motivou o chamado.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "Latitude do lugar do evento que motivou o chamado.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_alvo_finalizacao": {"name": "data_alvo_finalizacao", "description": "Data prevista para o atendimento do chamado. Caso prazo_tipo seja D fica em branco at\u00e9 o diagn\u00f3stico ser feito.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_alvo_diagnostico": {"name": "data_alvo_diagnostico", "description": "Data prevista para fazer o diagn\u00f3stico do servi\u00e7o.  Caso prazo_tipo seja F esta data fica em branco.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_real_diagnostico": {"name": "data_real_diagnostico", "description": "Data em que foi feito o diagn\u00f3stico do servi\u00e7o.  Caso prazo_tipo seja F esta data fica em branco.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prazo": {"name": "prazo", "description": "Prazo para o servi\u00e7o ser feito. Em dias ou horas ap\u00f3s a abertura do chamado. Caso haja diagn\u00f3stico o prazo conta ap\u00f3s se fazer o diagn\u00f3stico.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prazo_unidade": {"name": "prazo_unidade", "description": "Unidade de tempo utilizada no prazo. Dias ou horas. D ou H.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prazo_tipo": {"name": "prazo_tipo", "description": "Diagn\u00f3stico ou finaliza\u00e7\u00e3o. D ou F. Indica se a chamada precisa de diagn\u00f3stico ou n\u00e3o. Alguns servi\u00e7os precisam de avalia\u00e7\u00e3o para serem feitos, neste caso \u00e9 feito o diagn\u00f3stico. Por exemplo, pode de \u00e1rvore. H\u00e1 a necessidade de um engenheiro ambiental verificar a necessidade da poda ou n\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/administracao_servicos_publicos_1746/schema.yml", "compiled_path": "target/compiled/emd/models/administracao_servicos_publicos_1746/chamado.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "administracao_servicos_publicos_1746", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "month"}}, "created_at": 1653408875, "compiled_sql": "\n\nSELECT \n    * \nFROM `rj-segovi.administracao_servicos_publicos_1746.chamado`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`administracao_servicos_publicos_1746`.`chamado`"}, "model.emd.turma": {"raw_sql": "SELECT * FROM `rj-sme.educacao_basica.turma`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "educacao_basica", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "educacao_basica", "fqn": ["emd", "educacao_basica", "turma"], "unique_id": "model.emd.turma", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "educacao_basica/turma.sql", "original_file_path": "models/educacao_basica/turma.sql", "name": "turma", "alias": "turma", "checksum": {"name": "sha256", "checksum": "b86a05a4c304e76adbae75a98b19de2dfce06f95ba571b5bf73c419f77e23025"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Turma de alunos, atuais ou passadas, em unidades escolares pertencentes ou de interesse da prefeitura do Rio de Janeiro.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Mensal\n**Cobertura temporal**: At\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: Secretaria Municipal de Educa\u00e7\u00e3o\n**Publicado por**: Nuno Caminada Silva\n**Publicado por (email)**: nuno.silva@rioeduca.net\n", "columns": {"ano": {"name": "ano", "description": "Ano em que a turma existe ou existiu. \r\nUma turma \u00e9 identificada pela unidade escolar onde ela esta, pelo seu n\u00famero e por seu ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_escola": {"name": "id_escola", "description": "Identificador da escola na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_dependencia": {"name": "id_dependencia", "description": "Identificador que \u00e9 a concatena\u00e7\u00e3o do identificador da escola (id_escola) com o identificador da depend\u00eancia (n\u00famero que identifica unicamente cada depend\u00eancia na escola) na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_turma": {"name": "id_turma", "description": "Identificador da turma na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_turma_escola": {"name": "id_turma_escola", "description": "Identificador da turma. \r\n\u00c9 dado pela escola. \r\n\u00c9 \u00fanico em determinada escola e determinado ano.\r\nH\u00e1 uma padroniza\u00e7\u00e3o, ex. 1601 \u00e9 para o sexto ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "curso": {"name": "curso", "description": "Tipo do curso que a turma est\u00e1 fazendo. Ex. Ensino fundamental 1, Ensino fundamental classe especial, Educa\u00e7\u00e3o infantil pr\u00e9-escola. Este tipo pode variar de ano a ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nivel_ensino": {"name": "nivel_ensino", "description": "N\u00edvel do ensino da turma. \r\nPode ser Fundamental ou Educa\u00e7\u00e3o Infantil.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modalidade": {"name": "modalidade", "description": "Modalidade do ensino da turma. \r\nPode ser Regular, Especial ou EJA.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grupamento": {"name": "grupamento", "description": "S\u00e9rie da turma. \r\nEm unidades escolares da prefeitura em geral se vai do 1\u00aa a 9\u00aa ano. \r\nEm dados mais antigos pode ir da 1\u00aa a 8\u00aa s\u00e9rie.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "turno": {"name": "turno", "description": "Turno da turma.\r\nPode ser Manh\u00e3, Tarde, Noite ou Integral.\r\nPode ser primeiro turno ou segundo turno em turmas mais antigas.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sala": {"name": "sala", "description": "Nome da depend\u00eancia que \u00e9 ocupada pela turma como sala de aula.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "area_sala": {"name": "area_sala", "description": "\u00c1rea, em metros quadrados, da depend\u00eancia que \u00e9 ocupada pela turma.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "capacidade_sala": {"name": "capacidade_sala", "description": "Capacidade, em n\u00famero de alunos, da depend\u00eancia que \u00e9 ocupada pela turma.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tipo_sala": {"name": "tipo_sala", "description": "Tipo da depend\u00eancia ocupada pela turma. \r\nEx.: Sala de Aula, Audit\u00f3rio, Laborat\u00f3rio de Inform\u00e1tica, despensa, rampa de acesso etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sala_util_como": {"name": "sala_util_como", "description": "Utiliza\u00e7\u00e3o atual da depend\u00eancia ocupada pela turma. \r\nEx. os mesmos do tipo de depend\u00eancia(tipo_sala). Pode diferir do tipo de depend\u00eancia, pois o tipo de depend\u00eancia \u00e9 tipo oficial da depend\u00eancia, que pode ser diferente da utiliza\u00e7\u00e3o real.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/educacao_basica/schema.yml", "compiled_path": "target/compiled/emd/models/educacao_basica/turma.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "educacao_basica"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-sme.educacao_basica.turma`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`educacao_basica`.`turma`"}, "model.emd.coc": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by={\n            \"field\": \"data_particao\",\n            \"data_type\": \"date\",\n            \"granularity\": \"year\",\n        }\n    )\n}}\n\nSELECT * FROM `rj-sme.educacao_basica.coc`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n{% if is_incremental() %}\n\n{% set max_partition = run_query(\"SELECT gr FROM (SELECT IF(max(data_particao) > CURRENT_DATE('America/Sao_Paulo'), CURRENT_DATE('America/Sao_Paulo'), max(data_particao)) as gr FROM \" ~ this ~ \")\").columns[0].values()[0] %}\n\nAND\n    data_particao > (\"{{ max_partition }}\")\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "educacao_basica", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "year"}, "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "educacao_basica", "fqn": ["emd", "educacao_basica", "coc"], "unique_id": "model.emd.coc", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "educacao_basica/coc.sql", "original_file_path": "models/educacao_basica/coc.sql", "name": "coc", "alias": "coc", "checksum": {"name": "sha256", "checksum": "0410fdc6944e063436767aac09a1b034aa6584753b5f47cdbff07deb143dfeee"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: COCs fechados (n\u00e3o leva em conta o atual ) das turmas de escolas da prefeitura do Rio de Janeiro, com informa\u00e7\u00f5es desde 2014. \r\nEstas informa\u00e7\u00f5es s\u00e3o levantadas para, entre outras coisas, comparar a varia\u00e7\u00e3o entre um COC e outro.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Mensal\n**Cobertura temporal**: At\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: Secretaria Municipal de Educa\u00e7\u00e3o\n**Publicado por**: Nuno Caminada Silva\n**Publicado por (email)**: nuno.silva@rioeduca.net\n", "columns": {"id_cre": {"name": "id_cre", "description": "N\u00famero da CRE que administra a unidade escolar onde o COC ocorreu. \r\nCRE \u00e9 a sigla para coordenadoria regional.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_turma": {"name": "id_turma", "description": "Identificador da turma na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_turma_escola": {"name": "id_turma_escola", "description": "Identificador da turma. \u00c9 dado pela escola. \u00c9 \u00fanico em determinada escola e determinado ano. \r\nH\u00e1 uma padroniza\u00e7\u00e3o, ex. 1601 \u00e9 para o sexto ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ano": {"name": "ano", "description": "Ano do COC. Uma turma \u00e9 identificada pela unidade escolar onde ela esta, pelo seu n\u00famero e por seu ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_unidade": {"name": "id_unidade", "description": "N\u00famero da unidade escolar, dado pela SME, relativa ao COC. Cont\u00e9m 7 digitos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grupamento": {"name": "grupamento", "description": "Ano da turma. Ex. primeiro ano, segundo ano etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "turno": {"name": "turno", "description": "Turno da turma. Pode ser Manh\u00e3, Tarde, Noite ou Integral. \r\nPode ser primeiro turno ou segundo turno em turmas mais antigas.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_coc": {"name": "id_coc", "description": "N\u00famero do conselho de classe.\r\n\u00c9 \u00fanico por per\u00edodo letivo.\r\nConselho de classe \u00e9 um conjunto de reuni\u00f5es de professores que ocorre no final do bimestre. \r\nNo COC \u00e9 dado um conceito final para o aluno, diferente das notas por mat\u00e9rias.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alunos": {"name": "alunos", "description": "N\u00famero total de alunos do COC, na turma, no ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "masculino": {"name": "masculino", "description": "N\u00famero total de alunos do sexo masculino, do COC, na turma, no ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feminino": {"name": "feminino", "description": "N\u00famero total de alunos do sexo feminino, do COC, na turma, no ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deficiente": {"name": "deficiente", "description": "N\u00famero total de alunos deficientes, do COC, na turma, no ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "masculino_deficiente": {"name": "masculino_deficiente", "description": "N\u00famero total de alunos do sexo masculino deficientes, do COC, na turma, no ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feminino_deficiente": {"name": "feminino_deficiente", "description": "N\u00famero total de alunos do sexo feminino deficientes, do COC, na turma, no ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "masculino_nao_deficiente": {"name": "masculino_nao_deficiente", "description": "N\u00famero total de alunos do sexo masculino n\u00e3o deficientes, do COC, na turma, no ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "feminino_nao_deficiente": {"name": "feminino_nao_deficiente", "description": "N\u00famero total de alunos do sexo feminino n\u00e3o deficientes, do COC, na turma, no ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vagas": {"name": "vagas", "description": "Capacidade menos o total de alunos em determinado COC.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "capacidade": {"name": "capacidade", "description": "Capacidade da turma no ano, de acordo com o tamanho da sala. \r\nA capacidade da turma pode ser no m\u00e1ximo a constante em resolu\u00e7\u00e3o da SME, independente do tamanho da sala. \r\nA capacidade pode, eventualmente, ser menor do que a resolu\u00e7\u00e3o da SME \r\n\r\n(vai ser verificada esta defini\u00e7\u00e3o ).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/educacao_basica/schema.yml", "compiled_path": "target/compiled/emd/models/educacao_basica/coc.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "educacao_basica", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "year"}}, "created_at": 1653408875, "compiled_sql": "\n\nSELECT * FROM `rj-sme.educacao_basica.coc`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`educacao_basica`.`coc`"}, "model.emd.avaliacao": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by={\n            \"field\": \"data_particao\",\n            \"data_type\": \"date\",\n            \"granularity\": \"year\",\n        }\n    )\n}}\n\nSELECT \n    * \nFROM `rj-sme.educacao_basica.avaliacao`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n{% if is_incremental() %}\n\n{% set max_partition = run_query(\"SELECT gr FROM (SELECT IF(max(data_particao) > CURRENT_DATE('America/Sao_Paulo'), CURRENT_DATE('America/Sao_Paulo'), max(data_particao)) as gr FROM \" ~ this ~ \")\").columns[0].values()[0] %}\n\nAND\n    data_particao > (\"{{ max_partition }}\")\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "educacao_basica", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "year"}, "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "educacao_basica", "fqn": ["emd", "educacao_basica", "avaliacao"], "unique_id": "model.emd.avaliacao", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "educacao_basica/avaliacao.sql", "original_file_path": "models/educacao_basica/avaliacao.sql", "name": "avaliacao", "alias": "avaliacao", "checksum": {"name": "sha256", "checksum": "c339095a95f3ab2b9142794c0539d8eda07048d77a613adbab42ad8a03fd219b"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Avalia\u00e7\u00f5es de alunos dadas no COC.\r\nAs notas de disciplinas (ou a global) est\u00e3o preenchidas (de 0,0 a 10) ou com a anota\u00e7\u00e3o 'sem informa\u00e7\u00e3o' caso n\u00e3o haja nota para ela. \r\nDependendo do tipo de turma (Infantil, Fundamental 1, Fundamental 2, EJA, Classes especiais exclusivas, Turmas de corre\u00e7\u00e3o de fluxo, etc) algumas notas s\u00e3o preenchidas sempre com a anota\u00e7\u00e3o 'sem informa\u00e7\u00e3o'.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Anual\n**Cobertura temporal**: At\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: Secretaria Municipal de Educa\u00e7\u00e3o\n**Publicado por**: Nuno Caminada Silva\n**Publicado por (email)**: nuno.silva@rioeduca.net\n", "columns": {"ano": {"name": "ano", "description": "Ano do COC", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_turma": {"name": "id_turma", "description": "Identificador da turma na base de dados", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_aluno": {"name": "id_aluno", "description": "Identificador do aluno na base de dados", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_matricula_turma": {"name": "id_matricula_turma", "description": "Identificador que associa matricula do aluno a turma.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_curriculo": {"name": "id_curriculo", "description": "Identificador de etapa na base de dados. \r\nEx. Educa\u00e7\u00e3o infantil - creche turno \u00fanico, 2019 - ensino fundamental I - bil\u00edngue ing-tu", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_curriculo_periodo": {"name": "id_curriculo_periodo", "description": "Identificador da associa\u00e7\u00e3o entre curr\u00edculo (conjunto de disciplinas) e per\u00edodo (de um ano).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_coc": {"name": "id_coc", "description": "Identificador \u00fanico do COC na base de dados. \r\nConselho de classe \u00e9 um conjunto de reuni\u00f5es de professores que ocorre no final do bimestre. \r\nNo COC \u00e9 dado um conceito final para o aluno, diferente das notas por mat\u00e9rias.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "coc": {"name": "coc", "description": "Nome do COC. Ex. 1\u00ba COC, 2\u00ba COC etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_turma_escola": {"name": "id_turma_escola", "description": "Identificador da turma. \r\n\u00c9 dado pela escola.\r\n\u00c9 \u00fanico em determinada escola e determinado ano.\r\nH\u00e1 uma padroniza\u00e7\u00e3o, ex. 1601 \u00e9 para o sexto ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frequencia": {"name": "frequencia", "description": "Percentagem de dias que o aluno frequentou em rela\u00e7\u00e3o ao n\u00famero total de dias letivos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "conceito": {"name": "conceito", "description": "Conceito dado ao aluno em um COC.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nota_fundamental_1": {"name": "nota_fundamental_1", "description": "Nota dada pelo professor do fundamental 1.\r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito.\r\nEm geral \u00e9 preenchido para o fundamental 1.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "matematica": {"name": "matematica", "description": "Conceito dado em matem\u00e1tica ao aluno em um COC. \r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "portugues": {"name": "portugues", "description": "Conceito dado em portugu\u00eas ao aluno neste COC. Fica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. Em geral \u00e9 prenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ciencias": {"name": "ciencias", "description": "Conceito dado em ci\u00eancias ao aluno em um COC.\r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "geografia": {"name": "geografia", "description": "Conceito dado em geografia ao aluno em um COC. \r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "historia": {"name": "historia", "description": "Conceito dado em hist\u00f3ria ao aluno em um COC. \r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "educacao_fisica": {"name": "educacao_fisica", "description": "Conceito dado em educa\u00e7\u00e3o f\u00edsica ao aluno neste COC. Fica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. Em geral \u00e9 prenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ingles": {"name": "ingles", "description": "Conceito dado em ingl\u00eas ao aluno em um COC.\r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "espanhol": {"name": "espanhol", "description": "Conceito dado em espanhol ao aluno em um COC. \r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "frances": {"name": "frances", "description": "Conceito dado em franc\u00eas ao aluno em um COC. \r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alemao": {"name": "alemao", "description": "Conceito dado em alem\u00e3o ao aluno em um COC.\r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artes_visuais": {"name": "artes_visuais", "description": "Conceito dado em artes visuais ao aluno em um COC. \r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artes_plasticas": {"name": "artes_plasticas", "description": "Conceito dado em artes pl\u00e1sticas ao aluno em um COC. \r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "artes_cenicas": {"name": "artes_cenicas", "description": "Conceito dado em artes c\u00eanicas ao aluno em um COC.\r\nFica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. \r\nEm geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "teatro": {"name": "teatro", "description": "Conceito dado em teatro ao aluno em um COC. Fica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. Em geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "musica": {"name": "musica", "description": "Conceito dado em m\u00fasica ao aluno em um COC. Fica com 'sem informa\u00e7\u00e3o' caso a crian\u00e7a n\u00e3o tenha sido avaliada neste conceito. Em geral \u00e9 preenchido para o fundamental 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/educacao_basica/schema.yml", "compiled_path": "target/compiled/emd/models/educacao_basica/avaliacao.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "educacao_basica", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "year"}}, "created_at": 1653408875, "compiled_sql": "\n\nSELECT \n    * \nFROM `rj-sme.educacao_basica.avaliacao`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`educacao_basica`.`avaliacao`"}, "model.emd.aluno": {"raw_sql": "SELECT * FROM `rj-sme.educacao_basica.aluno`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "educacao_basica", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "educacao_basica", "fqn": ["emd", "educacao_basica", "aluno"], "unique_id": "model.emd.aluno", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "educacao_basica/aluno.sql", "original_file_path": "models/educacao_basica/aluno.sql", "name": "aluno", "alias": "aluno", "checksum": {"name": "sha256", "checksum": "72729cdbb2cdf0676aa986f82dc60c6cacb681efb338926db36c6230a9f3039c"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Alunos matriculados em escolas da prefeitura do Rio de Janeiro no ano corrente. \r\nCampos anonimizados para atendimento a LGPD.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Anual\n**Cobertura temporal**: At\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: Secretaria Municipal de Educa\u00e7\u00e3o\n**Publicado por**: Nuno Caminada Silva\n**Publicado por (email)**: nuno.silva@rioeduca.net\n", "columns": {"ano": {"name": "ano", "description": "Ano em que o aluno est\u00e1 matriculado.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_turma": {"name": "id_turma", "description": "Identificador da turma do aluno na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "turma": {"name": "turma", "description": "N\u00famero da turma do aluno.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_aluno": {"name": "id_aluno", "description": "Identificador do aluno na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "matricula": {"name": "matricula", "description": "Matr\u00edcula do aluno (mascarada, os quatro primeiros d\u00edgitos originais e o resto est\u00e1 preenchido com 9s)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "situacao": {"name": "situacao", "description": "Boleano indicando se o aluno est\u00e1 ativo na rede de ensino.\r\nPode ter os valores ativo ou inativo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_utltima_movimentacao": {"name": "id_utltima_movimentacao", "description": "C\u00f3digo do tipo da \u00faltima movimenta\u00e7\u00e3o do aluno. \r\nA movimenta\u00e7\u00e3o do aluno indica que o aluno saiu de uma turma, podendo ter ido para outra turma em outra ou na mesma escola.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ultima_movimentacao": {"name": "ultima_movimentacao", "description": "Indica o tipo da \u00faltima movimenta\u00e7\u00e3o do aluno. Ex: Abandono, renova\u00e7\u00e3o de matr\u00edcula, mudan\u00e7a de turma.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "genero": {"name": "genero", "description": "Sexo do aluno, pode ser masculino ou feminino", "meta": {}, "data_type": null, "quote": null, "tags": []}, "raca_cor": {"name": "raca_cor", "description": "Ra\u00e7a ou cor do aluno. Branca, preta, parda, amarela, ind\u00edgena, n\u00e3o declarada ou sem informa\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_nascimento": {"name": "data_nascimento", "description": "Data de nascimento do aluno.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "idade_atual": {"name": "idade_atual", "description": "Idade atual do aluno.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "idade_final_ano": {"name": "idade_final_ano", "description": "Idade do aluno no final do ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_deficiencia": {"name": "id_deficiencia", "description": "C\u00f3digo da defici\u00eancia do aluno. 00 caso n\u00e3o tenha nenhuma defici\u00eancia.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deficiencia": {"name": "deficiencia", "description": "Tipo da defici\u00eancia do aluno, caso ele tenha.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bairro": {"name": "bairro", "description": "Bairro do endere\u00e7o do aluno", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mora_com_filiacao": {"name": "mora_com_filiacao", "description": "0 se n\u00e3o mora com nenhum dos dois pais, 1 se mora com um dos dois.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tipo_transporte": {"name": "tipo_transporte", "description": "Transporte que o aluno usa para ir para a escola. Ex. pedestre, \u00f4nibus, metr\u00f4, carro, trem, outros ou sem informa\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bolsa_familia": {"name": "bolsa_familia", "description": "Booleana que indica se o aluno recebe bolsa familia. 0 se n\u00e3o recebe e 1 se recebe.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cartao_familia_carioca": {"name": "cartao_familia_carioca", "description": "Booleana que indica se o aluno recebe o cart\u00e3o fam\u00edlia carioca. 0 se n\u00e3o recebe e 1 se recebe.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "clube_escolar": {"name": "clube_escolar", "description": "Booleano indicando que o aluno est\u00e1 inscrito em um clube escolar, 0 se n\u00e3o inscrito e 1 se inscrito. Um clube escolar \u00e9 um clube pertencente a prefeitura e faz parte de uma escola da prefeitura do Rio de Janeiro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nucleo_artes": {"name": "nucleo_artes", "description": "Booleano indicando que o aluno est\u00e1 inscrito em um n\u00facleo de artes, 0 se n\u00e3o inscrito e 1 se inscrito. \r\nUm n\u00facleo de artes pertence a prefeitura e faz parte de uma escola da prefeitura do Rio de Janeiro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mais_educacao": {"name": "mais_educacao", "description": "Boleano indicando que o aluno est\u00e1 inscrito no Mais Educa\u00e7\u00e3o, 0 se n\u00e3o inscrito e 1 se inscrito. \r\nPrograma do MEC que d\u00e1 atividades espec\u00edficas e acompanhamento ao aluno. Espec\u00edfico para alunos com hist\u00f3rico de evas\u00e3o ou reprova\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "territorio_social": {"name": "territorio_social", "description": "Booleano indicando que o aluno mora em um territ\u00f3rio social, 0 se n\u00e3o mora e 1 se mora.\r\nUm territ\u00f3rio social \u00e9 uma regi\u00e3o geogr\u00e1fica do munic\u00edpio do Rio de Janeiro, classificada pela prefeitura como de extrema vulnerabilidade social.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tipo_avaliacao_jovens_adultos": {"name": "tipo_avaliacao_jovens_adultos", "description": "Tipo de avalia\u00e7\u00e3o usada, para o aluno, no ensino de jovens e adultos. Ex: UP 1 ou aval 2.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome": {"name": "nome", "description": "Nome do aluno (mascarado, est\u00e1 preenchido com Xs)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cpf": {"name": "cpf", "description": "CPF do aluno (mascarado, est\u00e1 preenchido com 9s)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/educacao_basica/schema.yml", "compiled_path": "target/compiled/emd/models/educacao_basica/aluno.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "educacao_basica"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-sme.educacao_basica.aluno`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`educacao_basica`.`aluno`"}, "model.emd.escola": {"raw_sql": "SELECT * FROM `rj-sme.educacao_basica.escola`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "educacao_basica", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "educacao_basica", "fqn": ["emd", "educacao_basica", "escola"], "unique_id": "model.emd.escola", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "educacao_basica/escola.sql", "original_file_path": "models/educacao_basica/escola.sql", "name": "escola", "alias": "escola", "checksum": {"name": "sha256", "checksum": "5cbb99c422a4ef61f37e85e99aae05b7ab726fcd7d7ed579347b7f8b154f609a"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Unidade escolar pertencente a, ou de interesse, da prefeitura do Rio de Janeiro onde podem ser alocadas turmas. As unidades escolares de interesse da PCRJ s\u00e3o creche parceiras onde est\u00e3o matriculados alunos da prefeitura do Rio de Janeiro.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Mensal\n**Cobertura temporal**: At\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: Secretaria Municipal de Educa\u00e7\u00e3o\n**Publicado por**: Nuno Caminada Silva\n**Publicado por (email)**: nuno.silva@rioeduca.net\n", "columns": {"id_inep": {"name": "id_inep", "description": "Identificador, dado pelo INEP - Instituto Nacional de Estudos e Pesquisas Educacionais, para a unidade escolar, O identificador \u00e9 \u00fanico para cada unidade escolar do pa\u00eds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_escola": {"name": "id_escola", "description": "Identificador da unidade escolar na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome": {"name": "nome", "description": "Nome da unidade escolar. Depende do atributo id_designacao.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tipo": {"name": "tipo", "description": "\"Tipo da unidade escolar, Pode ser creche, escola, CIEP ou EDI. EDI \u00e9 a sigla para Espa\u00e7o de\r\n Desenvolvimento Infantil, unidade escolar especializada na educa\u00e7\u00e3o para a primeira inf\u00e2ncia.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_designacao": {"name": "id_designacao", "description": "C\u00f3digo de identifica\u00e7\u00e3o da unidade escolar, constituido pelo c\u00f3digo da CRE, C\u00f3digo da micro-\u00e1rea, um sequencial e o tipo da unidade escolar pertencente a PCRJ ou de interesse desta.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "endereco": {"name": "endereco", "description": "Endere\u00e7o da unidade escolar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bairro": {"name": "bairro", "description": "Bairro do endere\u00e7o da unidade escolar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cep": {"name": "cep", "description": "CEP do endere\u00e7o da unidade escolar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "email": {"name": "email", "description": "E-mail da unidade escolar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "telefone": {"name": "telefone", "description": "Telefone da unidade escolar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "direcao": {"name": "direcao", "description": "Nome do(a) diretor(a) da unidade escolar", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cre": {"name": "cre", "description": "N\u00famero da CRE que administra a unidade escolar. CRE \u00e9 a sigla para coordenadoria regional\r\nde educa\u00e7\u00e3o. Uma CRE re\u00fane unidades escolares da prefeitura em uma determinada regi\u00e3o.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "polo": {"name": "polo", "description": "Polo onde esta a unidade escolar.\r\nUm polo \u00e9 um lugar que atende prioritariamente a alunos matriculados na Unidade Escolar de determinada \u00e1rea, oferecendo oficinas tendo o trabalho como princ\u00edpio educativo. \r\nEle pode, eventualmente, atender a alunos de \u00e1reas de outros polos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "micro_area": {"name": "micro_area", "description": "Micro \u00e1rea onde est\u00e1 a unidade escolar.\r\nUma micro \u00e1rea \u00e9 uma \u00e1rea geogr\u00e1fica do munic\u00edpio do Rio de Janeiro, definida pelo Instituto Pereira Passos (IPP) para facilitar a administra\u00e7\u00e3o escolar, independente de bairros e outras divis\u00f5es territoriais feitas pela prefeitura.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_institucional_pcrj": {"name": "id_institucional_pcrj", "description": "Identificador, dado pela prefeitura do Rio de Janeiro, para a unidade escolar. \r\nSICI \u00e9 o sistema de codifica\u00e7\u00e3o institucional.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numero_salas_recurso": {"name": "numero_salas_recurso", "description": "Total de salas de recurso na unidade. Sala de recurso \u00e9 uma depend\u00eancia com professor especializado e recursos especiais para determinada atividade.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numero_salas_aula": {"name": "numero_salas_aula", "description": "N\u00famero total de salas de aula da unidade escolar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "numero_salas_utilizadas": {"name": "numero_salas_utilizadas", "description": "N\u00famero de salas de aula, na unidade escolar, efetivamente usadas por turmas.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/educacao_basica/schema.yml", "compiled_path": "target/compiled/emd/models/educacao_basica/escola.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "educacao_basica"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-sme.educacao_basica.escola`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`educacao_basica`.`escola`"}, "model.emd.frequencia": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by={\n            \"field\": \"data_particao\",\n            \"data_type\": \"date\",\n            \"granularity\": \"month\",\n        }    \n    )\n}}\n\nSELECT \n    * \nFROM `rj-sme.educacao_basica.frequencia`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n{% if is_incremental() %}\n\n{% set max_partition = run_query(\"SELECT gr FROM (SELECT IF(max(data_particao) > CURRENT_DATE('America/Sao_Paulo'), CURRENT_DATE('America/Sao_Paulo'), max(data_particao)) as gr FROM \" ~ this ~ \")\").columns[0].values()[0] %}\n\nAND\n    data_particao > (\"{{ max_partition }}\")\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "educacao_basica", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "month"}, "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "educacao_basica", "fqn": ["emd", "educacao_basica", "frequencia"], "unique_id": "model.emd.frequencia", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "educacao_basica/frequencia.sql", "original_file_path": "models/educacao_basica/frequencia.sql", "name": "frequencia", "alias": "frequencia", "checksum": {"name": "sha256", "checksum": "b69b1bd1b084970d27741f053e748f4d859da8fa89664868fd490e9a153582f6"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Frequ\u00eancia dos alunos matriculados ou que j\u00e1 tenham sido matriculados em uma escola da prefeitura do Rio de Janeiro desde 2012. A frequ\u00eancia do aluno leva em considera\u00e7\u00e3o o periodo (em geral de um m\u00eas) e a disciplina feita.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Anual\n**Cobertura temporal**: Desde 2012 At\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: Secretaria Municipal de Educa\u00e7\u00e3o\n**Publicado por**: Nuno Caminada Silva\n**Publicado por (email)**: nuno.silva@rioeduca.net\n", "columns": {"id_escola": {"name": "id_escola", "description": "Identificador da escola, onde o aluno estuda, na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_turma": {"name": "id_turma", "description": "Identificador da turma do aluno na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "turma": {"name": "turma", "description": "Turma do aluno. Deve respeitar o atributo id_turma.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_aluno": {"name": "id_aluno", "description": "Identificador do aluno, para o qual est\u00e1 sendo calculado a frequ\u00eancia, na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_coc": {"name": "id_coc", "description": "Coc do bimestre que cont\u00e9m o per\u00edodo onde est\u00e1 sendo calculada a frequ\u00eancia. \r\nN\u00famero do conselho de classe.\r\n\u00c9 \u00fanico por per\u00edodo letivo. Conselho de classe \u00e9 uma reuni\u00e3o de professores que ocorre no final do bimestre.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_inicio": {"name": "data_inicio", "description": "Data do in\u00edcio do per\u00edodo em que vai ser calculada a frequ\u00eancia. \r\nUm per\u00edodo, em geral, de um m\u00eas, podendo come\u00e7ar e acabar no meio do m\u00eas.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_fim": {"name": "data_fim", "description": "Data do fim do per\u00edodo.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dias_letivos": {"name": "dias_letivos", "description": "N\u00famero de dias letivos no per\u00edodo. Um dia letivo \u00e9 um dia que teve aula.\r\nO somat\u00f3rio de todos os per\u00edodos em um ano deve dar no m\u00ednimo 200 dias.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tempos_letivos": {"name": "tempos_letivos", "description": "N\u00famero de tempos letivos da disciplina no per\u00edodo.\r\nTempo letivo \u00e9 um tempo de aula, como uma aula de geografia, hist\u00f3ria etc. \r\nQuando \u00e9 fundamental 1 fica igual a dias letivos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faltas_global": {"name": "faltas_global", "description": "N\u00famero de tempos letivos em que o aluno faltou em todas as disciplinas. \r\n\u00c9 o somat\u00f3rio dos valores do atributo faltas_disciplina. \r\nQuando \u00e9 fundamental 2 fica em branco.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_disciplina": {"name": "id_disciplina", "description": "Identificador da disciplina,  em que est\u00e1 sendo calculada a frequ\u00eancia, na base de dados. \r\nQuando \u00e9 fundamental 1 fica em branco.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_disciplina_ano": {"name": "id_disciplina_ano", "description": "C\u00f3digo da disciplina em que est\u00e1 sendo calculada a frequ\u00eancia.\r\n\u00c9 \u00fanico por ano. \r\nQuando \u00e9 fundamental 1 fica em branco.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disciplina": {"name": "disciplina", "description": "Nome da disciplina em que est\u00e1 sendo calculada a frequ\u00eancia.\r\nEm geral mant\u00e9m uma const\u00e2ncia, podendo durar o nome indefinidamente. deve respeitar o atributo id_disciplina_ano.\r\nQuando \u00e9 fundamental 1 fica em branco.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "faltas_disciplina": {"name": "faltas_disciplina", "description": "N\u00famero de faltas em tempos letivos do aluno na disciplina. \r\nQuando \u00e9 fundamental 1 fica zerado.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "carga_horaria_semanal": {"name": "carga_horaria_semanal", "description": "Carga hor\u00e1ria semanal na disciplina.\r\nQuando \u00e9 fundamental 1 fica zerado.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/educacao_basica/schema.yml", "compiled_path": "target/compiled/emd/models/educacao_basica/frequencia.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "educacao_basica", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "month"}}, "created_at": 1653408875, "compiled_sql": "\n\nSELECT \n    * \nFROM `rj-sme.educacao_basica.frequencia`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`educacao_basica`.`frequencia`"}, "model.emd.dependencia": {"raw_sql": "SELECT * FROM `rj-sme.educacao_basica.dependencia`", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "educacao_basica", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "educacao_basica", "fqn": ["emd", "educacao_basica", "dependencia"], "unique_id": "model.emd.dependencia", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "educacao_basica/dependencia.sql", "original_file_path": "models/educacao_basica/dependencia.sql", "name": "dependencia", "alias": "dependencia", "checksum": {"name": "sha256", "checksum": "2d09f2ddbc7a99f19ed875466dbf5b00283297d86ab7004677d977aaadb767b9"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Depend\u00eancias pertencentes \u00e0 prefeitura do Rio de Janeiro. Depend\u00eancia em uma unidade escolar pertencente a prefeitura do Rio de Janeiro. . Ex.: Sala de Aula, Audit\u00f3rio, Laborat\u00f3rio de Inform\u00e1tica, despensa, rampa de acesso etc.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Mensal\n**Cobertura temporal**: At\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: Secretaria Municipal de Educa\u00e7\u00e3o\n**Publicado por**: Nuno Caminada Silva\n**Publicado por (email)**: nuno.silva@rioeduca.net\n", "columns": {"id_escola": {"name": "id_escola", "description": "Identificador da escola, onde est\u00e1 a depend\u00eancia, na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_dependencia": {"name": "id_dependencia", "description": "Identificador que \u00e9 a concatena\u00e7\u00e3o do identificador da escola (id_escola) onde fica a depend\u00eancia com o identificador da depend\u00eancia (n\u00famero que identifica unicamente cada depend\u00eancia na escola) na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nome": {"name": "nome", "description": "Nome da depend\u00eancia.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tipo": {"name": "tipo", "description": "Tipo da depend\u00eancia. Ex.: Sala de Aula, Audit\u00f3rio, Laborat\u00f3rio de Inform\u00e1tica, despensa, rampa de acesso etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "aloca_turma": {"name": "aloca_turma", "description": "Indica se a depend\u00eancia pode ser usada para alocar turma ou n\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "util_como": {"name": "util_como", "description": "Utiliza\u00e7\u00e3o atual da depend\u00eancia. Ex. os mesmos do tipo de dep\u00eandencia. \r\nPode diferir do tipo de depend\u00eancia, pois o tipo de depend\u00eancia \u00e9 tipo oficial da depend\u00eancia, que pode ser diferente da utiliza\u00e7\u00e3o real.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "aloca_turma_e_util_como": {"name": "aloca_turma_e_util_como", "description": "Booleano que indica se a depend\u00eancia tem uma turma alocada a ela. \r\nSim, n\u00e3o ou emergencial.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "capacidade": {"name": "capacidade", "description": "N\u00famero m\u00e1ximo de alunos que a depend\u00eancia comporta. \r\nEm geral \u00e9 calculado em um m2 por aluno.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "area": {"name": "area", "description": "\u00c1rea, em metros quadrados, da depend\u00eancia", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/educacao_basica/schema.yml", "compiled_path": "target/compiled/emd/models/educacao_basica/dependencia.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "table", "schema": "educacao_basica"}, "created_at": 1653408875, "compiled_sql": "SELECT * FROM `rj-sme.educacao_basica.dependencia`", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`educacao_basica`.`dependencia`"}, "model.emd.aluno_historico": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by={\n            \"field\": \"data_particao\",\n            \"data_type\": \"date\",\n            \"granularity\": \"year\",\n        }\n    )\n}}\n\nSELECT \n    * \nFROM `rj-sme.educacao_basica.aluno_historico`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n{% if is_incremental() %}\n\n{% set max_partition = run_query(\"SELECT gr FROM (SELECT IF(max(data_particao) > CURRENT_DATE('America/Sao_Paulo'), CURRENT_DATE('America/Sao_Paulo'), max(data_particao)) as gr FROM \" ~ this ~ \")\").columns[0].values()[0] %}\n\nAND\n    data_particao > (\"{{ max_partition }}\")\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "educacao_basica", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "year"}, "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "educacao_basica", "fqn": ["emd", "educacao_basica", "aluno_historico"], "unique_id": "model.emd.aluno_historico", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "educacao_basica/aluno_historico.sql", "original_file_path": "models/educacao_basica/aluno_historico.sql", "name": "aluno_historico", "alias": "aluno_historico", "checksum": {"name": "sha256", "checksum": "54c7984cb8f1e38b21f7dd9d24f780df5b1a28f418b0f9f705d94b6343bae719"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/emd/models/educacao_basica/aluno_historico.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "educacao_basica", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "year"}}, "created_at": 1653408875, "compiled_sql": "\n\nSELECT \n    * \nFROM `rj-sme.educacao_basica.aluno_historico`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`educacao_basica`.`aluno_historico`"}, "model.emd.movimentacao": {"raw_sql": "{{\n    config(\n        materialized='incremental',\n        partition_by={\n            \"field\": \"data_particao\",\n            \"data_type\": \"date\",\n            \"granularity\": \"month\",\n        }    \n    )\n}}\n\nSELECT \n    * \nFROM `rj-sme.educacao_basica.movimentacao`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n{% if is_incremental() %}\n\n{% set max_partition = run_query(\"SELECT gr FROM (SELECT IF(max(data_particao) > CURRENT_DATE('America/Sao_Paulo'), CURRENT_DATE('America/Sao_Paulo'), max(data_particao)) as gr FROM \" ~ this ~ \")\").columns[0].values()[0] %}\n\nAND\n    data_particao > (\"{{ max_partition }}\")\n\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "educacao_basica", "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "month"}, "post-hook": [{"sql": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "transaction": true, "index": null}], "pre-hook": []}, "database": "datario-dev", "schema": "educacao_basica", "fqn": ["emd", "educacao_basica", "movimentacao"], "unique_id": "model.emd.movimentacao", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "educacao_basica/movimentacao.sql", "original_file_path": "models/educacao_basica/movimentacao.sql", "name": "movimentacao", "alias": "movimentacao", "checksum": {"name": "sha256", "checksum": "bb59930df6ad5ba97347edce49d682e935f2ad7f6008e3db8ca43091c283e6c2"}, "tags": [], "refs": [], "sources": [], "description": "**Descri\u00e7\u00e3o**: Movimenta\u00e7\u00f5es feitas de alunos ( algumas informa\u00e7\u00f5es desde 1973, s\u00e3o mais completas a partir de 2012 ).\r\nMovimenta\u00e7\u00e3o \u00e9 a sa\u00edda do aluno de uma turma, potencialmente para entrada em outra turma da mesma unidade escolar ou para outra unidade escolar, do munic\u00edpio ou n\u00e3o.\n**Frequ\u00eancia de atualiza\u00e7\u00e3o**: Anual\n**Cobertura temporal**: Desde 1973 at\u00e9 data corrente\n**\u00d3rg\u00e3o gestor dos dados**: Secretaria Municipal de Educa\u00e7\u00e3o\n**Publicado por**: Nuno Caminada Silva\n**Publicado por (email)**: nuno.silva@rioeduca.net\n", "columns": {"ano": {"name": "ano", "description": "Ano da movimenta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_cre": {"name": "id_cre", "description": "N\u00famero da CRE que administra a unidade escolar onde a movimenta\u00e7\u00e3o foi registrada. \r\nNo caso de sa\u00edda de uma unidade escolar ela \u00e9 registrada nesta unidade. \r\nCRE \u00e9 a sigla para coordenadoria regional de educa\u00e7\u00e3o. \r\nUma CRE re\u00fane unidades escolares da prefeitura em uma determinada regi\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_coc": {"name": "id_coc", "description": "COC cujo per\u00edodo onde o aluno sofreu movimenta\u00e7\u00e3o. N\u00famero do conselho de classe.\r\n\u00c9 \u00fanico por per\u00edodo letivo. \r\nConselho de classe \u00e9 um conjunto de reuni\u00f5es de professores que ocorre no final do bimestre.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_unidade": {"name": "id_unidade", "description": "N\u00famero da unidade escolar dado pela SME onde foi registrada a movimenta\u00e7\u00e3o.\r\nCont\u00e9m 7 d\u00edgitos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_turma_escola": {"name": "id_turma_escola", "description": "Identificador da turma da unidade escolar que registrou a movimenta\u00e7\u00e3o.\r\n\u00c9 dado pela unidade escolar.\r\n\u00c9 \u00fanico em determinada escola e determinado ano.\r\nH\u00e1 uma padroniza\u00e7\u00e3o, ex. 1601 \u00e9 para o sexto ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grupamento": {"name": "grupamento", "description": "Ano da turma da unidade escolar que registrou a movimenta\u00e7\u00e3o.\r\nEx. primeiro ano, segundo ano etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_aluno": {"name": "id_aluno", "description": "Identificador do aluno na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "matricula": {"name": "matricula", "description": "Matricula do aluno que fez a movimenta\u00e7\u00e3o. Campo anonimizado.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "genero": {"name": "genero", "description": "Sexo do aluno, pode ser masculino ou feminino", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_deficiencia": {"name": "id_deficiencia", "description": "C\u00f3digo da defici\u00eancia do aluno.\r\n00 caso n\u00e3o tenha nenhuma defici\u00eancia.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deficiencia": {"name": "deficiencia", "description": "Tipo da defici\u00eancia do aluno, caso ele tenha.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_nascimento": {"name": "data_nascimento", "description": "Data de nascimento do aluno.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "idade_atual": {"name": "idade_atual", "description": "Idade atual do aluno.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "idade_final_ano": {"name": "idade_final_ano", "description": "Idade do aluno no final do ano.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_movimentacao": {"name": "data_movimentacao", "description": "Data em que ocorreu a movimenta\u00e7\u00e3o.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "id_movimentacao": {"name": "id_movimentacao", "description": "Identificador do tipo da movimenta\u00e7\u00e3o na base de dados.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "movimentacao": {"name": "movimentacao", "description": "Nome do tipo da movimenta\u00e7\u00e3o.\r\nEx. Transfer\u00eancia da rede particular, transfer\u00eancia para a rede particular, Abandono etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ordem": {"name": "ordem", "description": "Ordem da movimenta\u00e7\u00e3o de determinado aluno durante a sua vida escolar no munic\u00edpio do Rio de Janeiro.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tipo": {"name": "tipo", "description": "Indica se a movimenta\u00e7\u00e3o \u00e9 de entrada ou sa\u00edda, mesmo dentro da mesma unidade escolar. Tem sempre o valor 'Entrada' quando a transfer\u00eancia \u00e9 entre turmas dentro da mesma unidade escolar.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "emd://models/educacao_basica/schema.yml", "compiled_path": "target/compiled/emd/models/educacao_basica/movimentacao.sql", "build_path": null, "deferred": false, "unrendered_config": {"post-hook": "GRANT `roles/bigquery.dataViewer` ON SCHEMA {{ this }} TO \"specialGroup:allUsers\"", "persist_docs": {"relation": true, "columns": true}, "materialized": "incremental", "schema": "educacao_basica", "partition_by": {"field": "data_particao", "data_type": "date", "granularity": "month"}}, "created_at": 1653408875, "compiled_sql": "\n\nSELECT \n    * \nFROM `rj-sme.educacao_basica.movimentacao`\nWHERE data_particao < CURRENT_DATE('America/Sao_Paulo')\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`datario-dev`.`educacao_basica`.`movimentacao`"}}, "sources": {}, "macros": {"macro.emd.generate_schema_name": {"unique_id": "macro.emd.generate_schema_name", "package_name": "emd", "root_path": "/home/runner/work/queries-datario/queries-datario", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n  \n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.make_date_partitioned_table": {"unique_id": "macro.dbt_bigquery.make_date_partitioned_table", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "make_date_partitioned_table", "macro_sql": "{% macro make_date_partitioned_table(model, relation, dates, should_create, verbose=False) %}\n\n  {% if should_create %}\n      {{ adapter.make_date_partitioned_table(relation) }}\n  {% endif %}\n\n  {% for date in dates %}\n    {% set date = (date | string) %}\n    {% if verbose %}\n        {% set table_start_time = modules.datetime.datetime.now().strftime(\"%H:%M:%S\") %}\n        {{ log(table_start_time ~ ' | -> Running for day ' ~ date, info=True) }}\n    {% endif %}\n\n    {% set fixed_sql = model['compiled_sql'] | replace('[DBT__PARTITION_DATE]', date) %}\n    {% set _ = adapter.execute_model(model, 'table', fixed_sql, decorator=date) %}\n  {% endfor %}\n\n  {% set num_days = dates | length %}\n  {% if num_days == 1 %}\n      {% set result_str = 'CREATED 1 PARTITION' %}\n  {% else %}\n      {% set result_str = 'CREATED ' ~ num_days ~ ' PARTITIONS' %}\n  {% endif %}\n\n  {{ store_result('main', response=result_str) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n  {%- set verbose = config.get('verbose', False) -%}\n\n  {# partitions: iterate over each partition, running a separate query in a for-loop #}\n  {%- set partitions = config.get('partitions') -%}\n\n  {% if partitions %}\n      {% if partitions is number or partitions is string %}\n        {% set partitions = [(partitions | string)] %}\n      {% endif %}\n\n      {% if partitions is not iterable %}\n        {{ exceptions.raise_compiler_error(\"Provided `partitions` configuration is not a list. Got: \" ~ partitions, model) }}\n      {% endif %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      Since dbt uses WRITE_TRUNCATE mode for tables, we only need to drop this thing\n      if it is not a table. If it _is_ already a table, then we can overwrite it without downtime\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% if partitions %}\n    {# Create the dp-table if 1. it does not exist or 2. it existed, but we just dropped it #}\n    {%- set should_create = (old_relation is none or exists_not_as_table) -%}\n    {{ make_date_partitioned_table(model, target_relation, partitions, should_create, verbose) }}\n  {% else %}\n    {%- set raw_partition_by = config.get('partition_by', none) -%}\n    {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n    {%- set cluster_by = config.get('cluster_by', none) -%}\n    {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n      {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n      {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    {% call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {% endcall -%}\n  {% endif %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt_bigquery.make_date_partitioned_table", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n      declare _dbt_max_partition {{ partition_by.data_type }} default (\n          select max({{ partition_by.field }}) from {{ this }}\n          where {{ partition_by.field }} is not null\n      );\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% set tmp_relation_exists = true %}\n      {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    \n    {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1653408875}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/opt/hostedtoolcache/Python/3.9.12/x64/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.emd.taxa_precipitacao_satelite": [], "model.emd.estacoes_inmet": [], "model.emd.estacoes_websirene": [], "model.emd.estacoes_alertario": [], "model.emd.taxa_precipitacao_alertario": [], "model.emd.quantidade_agua_precipitavel_satelite": [], "model.emd.meteorologia_inmet": [], "model.emd.logradouro": [], "model.emd.bairro": [], "model.emd.chamado": [], "model.emd.turma": [], "model.emd.coc": [], "model.emd.avaliacao": [], "model.emd.aluno": [], "model.emd.escola": [], "model.emd.frequencia": [], "model.emd.dependencia": [], "model.emd.aluno_historico": [], "model.emd.movimentacao": []}, "child_map": {"model.emd.taxa_precipitacao_satelite": [], "model.emd.estacoes_inmet": [], "model.emd.estacoes_websirene": [], "model.emd.estacoes_alertario": [], "model.emd.taxa_precipitacao_alertario": [], "model.emd.quantidade_agua_precipitavel_satelite": [], "model.emd.meteorologia_inmet": [], "model.emd.logradouro": [], "model.emd.bairro": [], "model.emd.chamado": [], "model.emd.turma": [], "model.emd.coc": [], "model.emd.avaliacao": [], "model.emd.aluno": [], "model.emd.escola": [], "model.emd.frequencia": [], "model.emd.dependencia": [], "model.emd.aluno_historico": [], "model.emd.movimentacao": []}}